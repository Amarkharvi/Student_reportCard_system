#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    May 15, 2020 11:21:42 AM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import miniProject_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Toplevel1 (root)
    miniProject_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    miniProject_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font13 = "-family {DejaVu Sans} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("807x565+219+130")
        top.title("Report Card System")
        top.configure(background="#ffffff")
        top.configure(highlightcolor="black")
        top.resizable(width=False,height=False)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.012, rely=0.142, relheight=0.681
                , relwidth=0.415)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="5")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.03, rely=0.052, height=41, width=109)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(font="-family {Noto Serif} -size 10")
        self.Label2.configure(text='''Usn:''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.358, rely=0.052,height=33, relwidth=0.555)
        self.Entry1.configure(background="white")
        self.Entry1.configure(borderwidth="3")
        self.Entry1.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1.configure(selectbackground="#c4c4c4")

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.03, rely=0.182, height=31, width=99)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(font="-family {Noto Serif} -size 10")
        self.Label3.configure(text='''Student name:''')

        self.Entry2 = tk.Entry(self.Frame1)
        self.Entry2.place(relx=0.358, rely=0.182,height=33, relwidth=0.555)
        self.Entry2.configure(background="white")
        self.Entry2.configure(borderwidth="3")
        self.Entry2.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry2.configure(selectbackground="#c4c4c4")

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.06, rely=0.286, height=31, width=49)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(font="-family {Noto Serif} -size 10")
        self.Label4.configure(text='''Sem:''')

        self.Entry3 = tk.Entry(self.Frame1)
        self.Entry3.place(relx=0.209, rely=0.286,height=33, relwidth=0.137)
        self.Entry3.configure(background="white")
        self.Entry3.configure(borderwidth="3")
        self.Entry3.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry3.configure(selectbackground="#c4c4c4")

        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.537, rely=0.286, height=31, width=39)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(background="#ffffff")
        self.Label5.configure(font="-family {Noto Serif} -size 10")
        self.Label5.configure(text='''Sec:''')

        self.Entry4 = tk.Entry(self.Frame1)
        self.Entry4.place(relx=0.687, rely=0.286,height=33, relwidth=0.137)
        self.Entry4.configure(background="white")
        self.Entry4.configure(borderwidth="3")
        self.Entry4.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry4.configure(selectbackground="#c4c4c4")

        self.Labelframe1 = tk.LabelFrame(self.Frame1)
        self.Labelframe1.place(relx=0.03, rely=0.39, relheight=0.558
                , relwidth=0.925)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Noto Serif} -size 10 -underline 1")
        self.Labelframe1.configure(text='''Marks''')
        self.Labelframe1.configure(background="#ffffff")

        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(relx=0.032, rely=0.093, height=31, width=49
                , bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(background="#ffffff")
        self.Label6.configure(font="-family {Noto Serif} -size 10")
        self.Label6.configure(text='''Sub1:''')

        self.Entry5 = tk.Entry(self.Labelframe1)
        self.Entry5.place(relx=0.194, rely=0.093, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(borderwidth="3")
        self.Entry5.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry5.configure(selectbackground="#c4c4c4")

        self.TSeparator1 = ttk.Separator(self.Labelframe1)
        self.TSeparator1.place(relx=0.484, rely=0.047, relheight=0.93
                , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.Label7 = tk.Label(self.Labelframe1)
        self.Label7.place(relx=0.516, rely=0.093, height=31, width=49
                , bordermode='ignore')
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(background="#ffffff")
        self.Label7.configure(font="-family {Noto Serif} -size 10")
        self.Label7.configure(text='''Sub2:''')

        self.Entry6 = tk.Entry(self.Labelframe1)
        self.Entry6.place(relx=0.677, rely=0.093, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry6.configure(background="white")
        self.Entry6.configure(borderwidth="3")
        self.Entry6.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry6.configure(selectbackground="#c4c4c4")

        self.Label8 = tk.Label(self.Labelframe1)
        self.Label8.place(relx=0.032, rely=0.326, height=31, width=49
                , bordermode='ignore')
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(background="#ffffff")
        self.Label8.configure(font="-family {Noto Serif} -size 10")
        self.Label8.configure(text='''Sub3:''')

        self.Entry7 = tk.Entry(self.Labelframe1)
        self.Entry7.place(relx=0.194, rely=0.326, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry7.configure(background="white")
        self.Entry7.configure(borderwidth="3")
        self.Entry7.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry7.configure(selectbackground="#c4c4c4")

        self.Entry8 = tk.Entry(self.Labelframe1)
        self.Entry8.place(relx=0.677, rely=0.326, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry8.configure(background="white")
        self.Entry8.configure(borderwidth="3")
        self.Entry8.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry8.configure(selectbackground="#c4c4c4")

        self.Entry9 = tk.Entry(self.Labelframe1)
        self.Entry9.place(relx=0.194, rely=0.558, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry9.configure(background="white")
        self.Entry9.configure(borderwidth="3")
        self.Entry9.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry9.configure(selectbackground="#c4c4c4")

        self.Entry10 = tk.Entry(self.Labelframe1)
        self.Entry10.place(relx=0.677, rely=0.558, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry10.configure(background="white")
        self.Entry10.configure(borderwidth="3")
        self.Entry10.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry10.configure(selectbackground="#c4c4c4")

        self.Label9 = tk.Label(self.Labelframe1)
        self.Label9.place(relx=0.516, rely=0.326, height=31, width=49
                , bordermode='ignore')
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(background="#ffffff")
        self.Label9.configure(font="-family {Noto Serif} -size 10")
        self.Label9.configure(text='''Sub4:''')

        self.Label10 = tk.Label(self.Labelframe1)
        self.Label10.place(relx=0.032, rely=0.558, height=31, width=49
                , bordermode='ignore')
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(background="#ffffff")
        self.Label10.configure(font="-family {Noto Serif} -size 10")
        self.Label10.configure(text='''Sub5:''')

        self.Label11 = tk.Label(self.Labelframe1)
        self.Label11.place(relx=0.516, rely=0.558, height=31, width=49
                , bordermode='ignore')
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(background="#ffffff")
        self.Label11.configure(font="-family {Noto Serif} -size 10")
        self.Label11.configure(text='''Sub6:''')

        self.Label12 = tk.Label(self.Labelframe1)
        self.Label12.place(relx=0.032, rely=0.791, height=31, width=49
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(background="#ffffff")
        self.Label12.configure(font="-family {Noto Serif} -size 10")
        self.Label12.configure(text='''Total:''')

        self.Entry11 = tk.Entry(self.Labelframe1)
        self.Entry11.place(relx=0.194, rely=0.791, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry11.configure(background="white")
        self.Entry11.configure(borderwidth="3")
        self.Entry11.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry11.configure(selectbackground="#c4c4c4")

        self.Entry12 = tk.Entry(self.Labelframe1)
        self.Entry12.place(relx=0.677, rely=0.791, height=33, relwidth=0.213
                , bordermode='ignore')
        self.Entry12.configure(background="white")
        self.Entry12.configure(borderwidth="3")
        self.Entry12.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry12.configure(selectbackground="#c4c4c4")

        self.Label13 = tk.Label(self.Labelframe1)
        self.Label13.place(relx=0.516, rely=0.791, height=31, width=49
                , bordermode='ignore')
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(background="#ffffff")
        self.Label13.configure(font="-family {Noto Serif} -size 10")
        self.Label13.configure(text='''SGPA:''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.05, rely=0.018, height=61, width=259)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(font="-family {Noto Serif} -size 17 -weight bold -underline 1")
        self.Label1.configure(text='''Student Details''')

        self.menubar = tk.Menu(top,font=font13,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.012, rely=0.832, relheight=0.15
                , relwidth=0.421)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Noto Serif} -size 10 -underline 1")
        self.Labelframe2.configure(text='''Menu''')
        self.Labelframe2.configure(background="#ffffff")

        self.Button1 = tk.Button(self.Labelframe2)
        self.Button1.place(relx=0.029, rely=0.353, height=30, width=104
                , bordermode='ignore')
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(borderwidth="3")
        self.Button1.configure(font="-family {Noto Serif} -size 8")
        self.Button1.configure(text='''Add Student''')
        from os.path import join as pjoin
        def writefiles(self):# function to write all entries into the file
            usn=self.Entry1.get()
            if usn=="":
                mb.showinfo(title="Data error",message="Some data are empty dear")
            else:
                first=usn[0:10]+".txt"
                path_to_file=pjoin("/","home","lonewolf","myProject","files",first)# put your own path here
                with open(path_to_file,"w") as wr:
                    wr.write("Student usn: "+str(self.Entry1.get())+"\n"+"Student Name: "+str(self.Entry2.get())+"\n"+
                        "Sem: "+str(self.Entry3.get())+"\n"+"Sec: "+str(self.Entry4.get())+"\n"+"Sub1: "+str(self.Entry5.get())+"\n"+
                        "Sub2: "+str(self.Entry6.get())+"\n"+"Sub3: "+str(self.Entry7.get())+"\n"+"Sub4: "+str(self.Entry8.get())+"\n"+
                        "Sub5: "+str(self.Entry9.get())+"\n"+"Sub6: "+str(self.Entry10.get())+"\n"+"Total: "+str(self.Entry11.get())+"\n"+
                        "SGPA: "+str(self.Entry12.get())+"\n")
                    print("data stored")
                    mb.showinfo(title="Data Storing",message="Student Detail Added")
                    wr.close()
        self.Button1.configure(command=lambda: writefiles(self))
        
        self.Button2 = tk.Button(self.Labelframe2)
        self.Button2.place(relx=0.324, rely=0.353, height=30, width=109
                , bordermode='ignore')
        self.Button2.configure(activebackground="#f9f9f9")
        self.Button2.configure(borderwidth="3")
        self.Button2.configure(font="-family {Noto Serif} -size 8")
        self.Button2.configure(text='''Clear Details''')
        def clearDetails(self): # function to clear all fields of the student details.
                self.Entry1.delete(0,tk.END)
                self.Entry2.delete(0,tk.END)
                self.Entry3.delete(0,tk.END)
                self.Entry4.delete(0,tk.END)
                self.Entry5.delete(0,tk.END)
                self.Entry6.delete(0,tk.END)
                self.Entry7.delete(0,tk.END)
                self.Entry8.delete(0,tk.END)
                self.Entry9.delete(0,tk.END)
                self.Entry10.delete(0,tk.END)
                self.Entry11.delete(0,tk.END)
                self.Entry12.delete(0,tk.END)
         
        self.Button2.configure(command=lambda:clearDetails(self))
        self.Button3 = tk.Button(self.Labelframe2)
        self.Button3.place(relx=0.647, rely=0.353, height=30, width=108
                , bordermode='ignore')
        self.Button3.configure(activebackground="#f9f9f9")
        self.Button3.configure(borderwidth="3")
        self.Button3.configure(font="-family {Noto Serif} -size 8")
        self.Button3.configure(text='''delete Student''')
        def deleteStudent(self): #function to delete file
            import os
            delFile=self.Entry1.get()
            if os.path.isfile('/home/lonewolf/myProject/files/'+delFile+'.txt')==True:# put your own path here
                os.remove('/home/lonewolf/myProject/files/'+delFile+'.txt')# put your own path here
                print("data deleted")
                mb.showinfo(title="Data Deletion",message="Data Deleted")
            else:                 
                mb.showinfo(title="File not found!!",message="No Data Found")
    
        self.Button3.configure(command=lambda : deleteStudent(self))

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.446, rely=0.0, relheight=1.009)
        self.TSeparator2.configure(orient="vertical")

        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.458, rely=0.018, relheight=0.54
                , relwidth=0.533)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {Noto Serif} -size 10 -underline 1")
        self.Labelframe3.configure(text='''View Data''')
        self.Labelframe3.configure(background="#ffffff")

        self.Text1 = tk.Text(self.Labelframe3)
        self.Text1.place(relx=0.023, rely=0.066, relheight=0.905, relwidth=0.549
                , bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font="-family {DejaVu Sans} -size 10")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Listbox1 = tk.Listbox(self.Labelframe3)
        self.Listbox1.place(relx=0.581, rely=0.066, relheight=0.905
                , relwidth=0.405, bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font="-family {DejaVu Sans Mono} -size 10")

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.483, rely=0.584, height=31, width=391)
        self.Button4.configure(activebackground="#f9f9f9")
        self.Button4.configure(borderwidth="3")
        self.Button4.configure(font="-family {Noto Serif} -size 10")
        self.Button4.configure(text='''View Student Data''')
        def viewData(self): # function to show the files in the listbox 
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lonewolf/myProject/files/')# put your own path here 
            for item in flist:
                self.Listbox1.insert(tk.END,item)

        def showContent(event): # function to show the selected file into the text box    
            x=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(x)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lonewolf","myProject","files/"+file)# put your own path here
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        self.Listbox1.bind("<<ListboxSelect>>",showContent)       
        self.Button4.configure(command= lambda: viewData(self))

        self.Label14 = tk.Label(top)
        self.Label14.place(relx=0.471, rely=0.655, height=181, width=419)
        self.Label14.configure(activebackground="#f9f9f9")
        photo_location = os.path.join(prog_location,"/home/lonewolf/myProject/images/clgback(1).png")#put your own path here
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label14.configure(image=_img0)
        self.Label14.configure(text='''Label''')
        from tkinter import messagebox as mb

        def closeMain():# function that shows dialog to close
            if mb.askyesno('Verify', 'Do u really want to quit?'):
                top.destroy()
                   
            
        top.protocol('WM_DELETE_WINDOW', closeMain) #when close button is pressed closeMain function is called 

if __name__ == '__main__':
    vp_start_gui()





